 # Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

pool:
  vmImage: ubuntu-latest

steps:
- script: echo '$(buildConfiguration)'
  displayName: 'Run a one-line script'

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '6.10.0'
    checkLatest: true
  displayName: "Use Nuget 6.10.0"

- task: NuGetCommand@2
  displayName: "restore nuget"
  inputs:
    command: 'restore'
    restoreSolution: '**/CRBackend/*.sln'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: "build"
  inputs:
    command: 'build'
    projects: '**/*/*.sln'
    arguments: '--configuration $(buildConfiguration)'
    verbosityRestore: Detailed
    verbosityPack: Detailed
    buildProperties: 

- task: DotNetCoreCLI@2
  displayName: "test"
  inputs:
    command: 'test'
    projects: '**/*/*.sln'
    arguments: '--configuration $(buildConfiguration)'

- task: CopyFiles@2
  displayName: "Copy Terraform files to output"
  name: "CopyTerraform"
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/devops/Terraform'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
  
- task: DotNetCoreCLI@2
  displayName: "publish build output"
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: true
    projects: '**/*/*.sln'
    arguments: '--no-restore --configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
    

- task: PublishBuildArtifacts@1
  displayName: "publish artifacts"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'




